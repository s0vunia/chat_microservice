name: Go

on:
  push:
    branches: [ main, master, hw3 ]
  pull_request:
    branches: [ main, master, hw3 ]

env:
  REGISTRY: "s0vunia.cr.cloud.ru"
  CHAT_IMAGE_NAME: "chat-prod"
  MIGRATOR_IMAGE_NAME: "migrator-chat-prod"
  CONTAINER_NAME: "chat-server-container"

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: sudo docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Create env files
        run: |
          touch local.env
          touch prod.env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> prod.env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> prod.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> prod.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> prod.env
          echo "PG_DSN=\"${{ secrets.PG_DSN }}\"" >> prod.env
          echo "MIGRATION_DSN=\"${{ secrets.MIGRATION_DSN }}\"" >> prod.env
          echo MIGRATION_DIR=${{ secrets.MIGRATION_DIR }} >> prod.env
          echo GRPC_PORT=${{ secrets.GRPC_PORT }} >> prod.env
          echo GRPC_HOST=${{ secrets.GRPC_HOST }} >> prod.env
          cat prod.env

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          sudo docker buildx create --use
          sudo docker buildx build --no-cache --push --tag $REGISTRY/$CHAT_IMAGE_NAME:$TAG_NAME -f Dockerfile .
          
          sudo docker buildx create --use
          sudo docker buildx build --no-cache --push --tag $REGISTRY/$MIGRATOR_IMAGE_NAME:$TAG_NAME -f migration_prod.Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create env files
        run: |
          touch local.env
          touch prod.env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> prod.env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> prod.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> prod.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> prod.env
          echo "PG_DSN=\"${{ secrets.PG_DSN }}\"" >> prod.env
          echo "MIGRATION_DSN=\"${{ secrets.MIGRATION_DSN }}\"" >> prod.env
          echo MIGRATION_DIR=${{ secrets.MIGRATION_DIR }} >> prod.env
          echo GRPC_PORT=${{ secrets.GRPC_PORT }} >> prod.env
          echo GRPC_HOST=${{ secrets.GRPC_HOST }} >> prod.env
          cat prod.env

      - name: Copy files to server using SSH key
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "docker-compose.yaml,local.env,prod.env"
          target: "/tmp/"


      - name: Deploy to Cloud.ru via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          envs: CHAT_IMAGE_NAME,MIGRATOR_IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)

            # Login into Selectel Registry
            sudo docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

            # Navigate to /tmp/ on the server
            cd /tmp/
            ls
            
            # Pull images from registry
            sudo docker pull $REGISTRY/$CHAT_IMAGE_NAME:$TAG_NAME
            sudo docker pull $REGISTRY/$MIGRATOR_IMAGE_NAME:$TAG_NAME

            # Export environment variables for docker-compose
            export TAG_NAME=$TAG_NAME
            export REGISTRY=$REGISTRY
            export CHAT_IMAGE_NAME=$CHAT_IMAGE_NAME
            export MIGRATOR_IMAGE_NAME=$MIGRATOR_IMAGE_NAME
            
            touch .env
            echo "REGISTRY=$REGISTRY" >> .env
            echo "MIGRATOR_IMAGE_NAME=$MIGRATOR_IMAGE_NAME" >> .env
            echo "CHAT_IMAGE_NAME=$CHAT_IMAGE_NAME" >> .env
            echo "TAG_NAME=$TAG_NAME" >> .env
            
            # Deploy services defined in docker-compose.yml
            sudo docker compose --env-file .env up -d chat-prod pg-prod migrator-prod

            # Optionally, remove the copied docker-compose.yml file
            sudo rm docker-compose.yaml

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.59

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=30m --config=./.golangci.pipeline.yaml

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"
